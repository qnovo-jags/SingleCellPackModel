component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Detailed
    %    Number of parallel assemblies: 1
    %    Number of cells per parallel assembly: 1
    %
    %    MATLAB version: 25.1
    %    Simscape Battery version: 25.1
    %    Simscape code generated on: 02-Oct-2025 11:24:35

    parameters
        BatteryCapacityCell = {27,'A*hr'}; % Battery capacity
        ExtrapolationMethodCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        SOCBreakpointsCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % State of charge breakpoints, SOC
        TemperatureBreakpointsCell = {[278, 293, 313],'K'}; % Temperature breakpoints, T
        OpenCircuitVoltageThermalCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, OCV(SOC,T)
        VoltageRangeCell = {[0, inf],'V'}; % Terminal voltage operating range, [Min Max]
        ResistanceSOCBreakpointsCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % State of charge breakpoints for resistance, SOC
        ResistanceTemperatureBreakpointsCell = {[278, 293, 313],'K'}; % Temperature breakpoints for resistance, T
        R0ThermalCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Instantaneous resistance, R0(SOC,T)
        R1ThermalCell = {[.0109, .0029, .0013; .0069, .0024, .0012; .0047, .0026, .0013; .0034, .0016, .001; .0033, .0023, .0014; .0033, .0018, .0011; .0028, .0017, .0011],'Ohm'}; % First polarization resistance, R1(SOC,T)
        Tau1ThermalCell = {[20, 36, 39; 31, 45, 39; 109, 105, 61; 36, 29, 26; 59, 77, 67; 40, 33, 29; 25, 39, 33],'s'}; % First time constant, Tau1(SOC,T)
        SimulationTemperatureCell = {298.15,'K'}; % Simulation temperature
    end

    parameters(ExternalAccess=none)
        P = 1; % Batteries in Parallel
        S = 1; % Batteries in Series
        CellCount = P*S; % Number of cells in battery
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        socCell = {value={1,'1'},priority=priority.high}; % Cell state of charge
        batteryVoltage = {0,'V'}; % Terminal voltage
        batteryCurrent = {0,'A'}; % Current (positive in)
        numCycles = {value={0,'1'},priority=priority.high}; % Discharge cycles
        vParallelAssembly = {value={0,'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={1,'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(socCell) == CellCount);
        assert(length(batteryVoltage) == CellCount);
        assert(length(batteryCurrent) == CellCount);
        assert(length(numCycles) == CellCount);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
    end

    connections
        connect(p,SyCellSk603ParallelAssembly(1).p);
        connect(n,SyCellSk603ParallelAssembly(end).n);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",BatteryCapacityCell,ExtrapolationMethodCell),...
            UIGroup("Open Circuit Voltage",SOCBreakpointsCell,TemperatureBreakpointsCell,OpenCircuitVoltageThermalCell,VoltageRangeCell),...
            UIGroup("Overpotential",ResistanceSOCBreakpointsCell,ResistanceTemperatureBreakpointsCell,R0ThermalCell,R1ThermalCell,Tau1ThermalCell),...
            UIGroup("Thermal",SimulationTemperatureCell)];
        Icon = 'module.svg';
    end

    for Sidx = 1:S
        components(ExternalAccess=observe,CompileReuse=true)
            SyCellSk603ParallelAssembly(Sidx) = Batteries.ParallelAssemblies.ParallelAssemblyType1(...
                P = P,BatteryCapacityCell = BatteryCapacityCell,...
                ExtrapolationMethodCell = ExtrapolationMethodCell,...
                SOCBreakpointsCell = SOCBreakpointsCell,TemperatureBreakpointsCell = TemperatureBreakpointsCell,...
                OpenCircuitVoltageThermalCell = OpenCircuitVoltageThermalCell,...
                VoltageRangeCell = VoltageRangeCell,...
                ResistanceSOCBreakpointsCell = ResistanceSOCBreakpointsCell,...
                ResistanceTemperatureBreakpointsCell = ResistanceTemperatureBreakpointsCell,R0ThermalCell = R0ThermalCell,...
                R1ThermalCell = R1ThermalCell,Tau1ThermalCell = Tau1ThermalCell,...
                SimulationTemperatureCell = SimulationTemperatureCell,socCell.priority = priority.none,...
                batteryVoltage.priority = priority.none,batteryCurrent.priority = priority.none,...
                numCycles.priority = priority.none,vParallelAssembly.priority = priority.none,...
                socParallelAssembly.priority = priority.none);
        end
    end

    for Sidx = 1:S-1
        connections
            connect(SyCellSk603ParallelAssembly(Sidx).n,SyCellSk603ParallelAssembly(Sidx+1).p);
        end
    end

    for Sidx = 1:S
        equations
            SyCellSk603ParallelAssembly(Sidx).socCell == reshape(socCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            SyCellSk603ParallelAssembly(Sidx).batteryVoltage == reshape(batteryVoltage((Sidx*P-(P-1)):(Sidx*P)),P,1);
            SyCellSk603ParallelAssembly(Sidx).batteryCurrent == reshape(batteryCurrent((Sidx*P-(P-1)):(Sidx*P)),P,1);
            SyCellSk603ParallelAssembly(Sidx).numCycles == reshape(numCycles((Sidx*P-(P-1)):(Sidx*P)),P,1);
            SyCellSk603ParallelAssembly(Sidx).vParallelAssembly == vParallelAssembly(Sidx);
            SyCellSk603ParallelAssembly(Sidx).socParallelAssembly == socParallelAssembly(Sidx);
        end
    end
end